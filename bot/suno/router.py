from aiogram import Router
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery, InlineKeyboardMarkup

from bot.filters import TextCommand, StateCommand, StartWithQuery
from bot.suno.command_types import suno_command, suno_text
from services import StateTypes, stateService, sunoService, tokenizeService

sunoRouter = Router()


async def suno_create_messages(message, generation):
    result = list(generation['data']['clips'].values())[0]

    await message.answer_photo(
        photo=result["image_large_url"],
        caption=f"""
    –¢–µ–∫—Å—Ç *¬´{result["title"]}¬ª*

    {result["metadata"]["prompt"]}
    """)

    await message.answer_document(document=result["audio_url"])
    await message.answer_video(video=result["video_url"])
    await message.answer(text="C–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Suno –µ—â–µ? üî•", reply_markup=InlineKeyboardMarkup(
        resize_keyboard=True,
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å üî•",
                    callback_data="suno-generate"
                )
            ]
        ],
    ))


@sunoRouter.message(StateCommand(StateTypes.Suno))
async def suno_generate_handler(message: Message):
    stateService.set_current_state(message.from_user.id, StateTypes.Default)

    wait_message = await message.answer(
        "**‚åõÔ∏è–û–∂–∏–¥–∞–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...** –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 30-50 —Å–µ–∫—É–Ω–¥. \n–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º.")

    await message.bot.send_chat_action(message.chat.id, "typing")

    async def task_id_get(task_id: str):
        await message.answer(f"""
ID –≤–∞—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: `1:suno:{task_id}:generate`.

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚ö°Ô∏è.
""")

    generation = await sunoService.generate_suno(message.text, task_id_get)

    await suno_create_messages(message, generation)

    await tokenizeService.update_token(message.from_user.id, 5000, "subtract")
    await message.answer(f"""
ü§ñ –ó–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é  5000‚ö°Ô∏è

‚ùî /help - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ ‚ö°Ô∏è
    """)

    await wait_message.delete()


@sunoRouter.message(TextCommand([suno_command(), suno_text()]))
async def suno_prepare_handler(message: Message):
    stateService.set_current_state(message.from_user.id, StateTypes.Suno)

    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫—É—é –ø–µ—Å–Ω—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å.üéµ \n–ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–µ–º—É –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏: ")


@sunoRouter.callback_query(StartWithQuery("suno-generate"))
async def suno_prepare_handler(callback: CallbackQuery):
    stateService.set_current_state(callback.message.from_user.id, StateTypes.Suno)

    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫—É—é –ø–µ—Å–Ω—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å.üéµ \n–ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–µ–º—É –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏: ")

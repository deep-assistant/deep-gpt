import logging

from aiogram import Router
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery, InlineKeyboardMarkup

from bot.filters import TextCommand, StateCommand, StartWithQuery
from bot.commands import suno_command, suno_text
from bot.empty_prompt import is_empty_prompt
from bot.constants import DEFAULT_ERROR_MESSAGE
from services import StateTypes, stateService, sunoService, tokenizeService

sunoRouter = Router()


async def suno_create_messages(message, generation):
    result = list(generation['data']['output']['clips'].values())[0]

    await message.answer_photo(
        photo=result["image_large_url"],
        caption=f"""
    –¢–µ–∫—Å—Ç *¬´{result["title"]}¬ª*

    {result["metadata"]["prompt"]}
    """)

    await message.answer_document(document=result["audio_url"])
    await message.answer_video(video=result["video_url"])
    await message.answer(text="C–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Suno –µ—â–µ? üî•", reply_markup=InlineKeyboardMarkup(
        resize_keyboard=True,
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å üî•",
                    callback_data="suno-generate"
                )
            ]
        ],
    ))


@sunoRouter.message(StateCommand(StateTypes.Suno))
async def suno_generate_handler(message: Message):
    try:
        user_id = message.from_user.id

        if not stateService.is_suno_state(user_id):
            return

        tokens = await tokenizeService.get_tokens(user_id)

        if tokens.get("tokens") < 0:
            await message.answer("""
    –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚ö°Ô∏è!

    /balance - ‚ú® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–∞–ª–∞–Ω—Å
    /buy - üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
    /referral - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ ‚ö°Ô∏è!       
    """)
            stateService.set_current_state(user_id, StateTypes.Default)
            return

        if (is_empty_prompt(message.text)):
            await message.answer(
                "üö´ –í –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ üéµ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup(
                    resize_keyboard=True,
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                                callback_data="cancel-suno-generate"
                            )
                        ]
                    ],
                )
            )
            return

        # message text should not exceed 200 characters
        if len(message.text) > 200:
            await message.answer("""–û–ø–∏—Å–∞–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ üéµ *–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤* –¥–ª—è Suno.

    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–º—Ç –∫–æ—Ä–æ—á–µ.
    """, reply_markup=InlineKeyboardMarkup(
                resize_keyboard=True,
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                            callback_data="cancel-suno-generate"
                        )
                    ],
                ],
            ))
            return
    
        stateService.set_current_state(user_id, StateTypes.Default)

        wait_message = await message.answer(
            "**‚åõÔ∏è–û–∂–∏–¥–∞–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...**\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: *3-5 –º–∏–Ω—É—Ç*.\n–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º.")

        await message.bot.send_chat_action(message.chat.id, "typing")

        async def task_id_get(task_id: str):
            await message.answer(f"`1:suno:{task_id}:generate`")
            await message.answer(f"""–≠—Ç–æ ID –≤–∞—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

    –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –º–æ–º–µ–Ω—Ç.
                                
    –í—ã —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.
    """)

        generation = await sunoService.generate_suno(message.text, task_id_get)

        await suno_create_messages(message, generation)

        await tokenizeService.update_token(user_id, 5700, "subtract")
        await message.answer(f"""
    ü§ñ –ó–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ *Suno*: *5700*

    ‚ùî /help - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ ‚ö°Ô∏è
        """)

        await wait_message.delete()

    except Exception as e:
        await message.answer(DEFAULT_ERROR_MESSAGE)
        logging.error(f"Failed to generate Suno: {e}")
        stateService.set_current_state(user_id, StateTypes.Default)
        return


@sunoRouter.message(TextCommand([suno_command(), suno_text()]))
async def suno_prepare_handler(message: Message):
    user_id = message.from_user.id
    await enter_suno_state(user_id, message)

@sunoRouter.callback_query(StartWithQuery("suno-generate"))
async def suno_prepare_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    await enter_suno_state(user_id, callback_query.message)
    
@sunoRouter.callback_query(StartWithQuery("cancel-suno-generate"))
async def cancel_state(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    stateService.set_current_state(user_id, StateTypes.Default)
    await callback_query.message.delete()
    await callback_query.answer("–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –≤ Suno —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω!")

async def enter_suno_state(user_id, message: Message):
    stateService.set_current_state(user_id, StateTypes.Suno)

    await message.answer(text="""*–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º* –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –≤ *Suno*.

*–°–ª–µ–¥—É—é—â–µ–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ –ø—Ä–æ–º–ø—Ç –¥–ª—è Suno* –∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å *5000‚ö°Ô∏è*.

–û–ø–∏—à–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –º—É–∑—ã–∫–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é üéµ (*–Ω–µ –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤*), –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏.
""", reply_markup=InlineKeyboardMarkup(
        resize_keyboard=True,
        inline_keyboard=[
            [InlineKeyboardButton(
                text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                callback_data=f"cancel-suno-generate"
            )],
        ]
    ))